name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 9.0.x

      - name: Extract version and changelog entry
        id: changelog
        run: |
          VERSION=$(grep -m 1 -Po '(?<=## `)v?[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md)
          VERSION=${VERSION#v}  # Remove leading 'v' if any
          if [ -z "$VERSION" ]; then
            echo "::error::No version found in CHANGELOG.md"
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Extract changelog section for this version
          CHANGELOG_ENTRY="$(awk -v version="$VERSION" '$0 ~ ("## `" version "`") { start=1; next } start && $0 ~ /^## `/ { exit } start { print }' CHANGELOG.md)"
          # If it's the last section (no following ##), grab to end of file
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG_ENTRY=$(awk "/## \`$VERSION\`/,0" CHANGELOG.md | sed '1d')
          fi
          echo "$CHANGELOG_ENTRY" > extracted_changelog.md

      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view "v${{ steps.changelog.outputs.version }}" &> /dev/null; then
            echo "::error::Release v${{ steps.changelog.outputs.version }} already exists."
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (Release)
        run: dotnet build . --configuration Release -p:Version=${{ env.VERSION }}

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./dist

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          body_path: extracted_changelog.md
          files: ./dist/*
          fail_on_unmatched_files: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
